<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Radio Browser API</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"
    integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
  <link href='https://fonts.googleapis.com/css?family=VT323|Cutive+Mono|Nova+Mono' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="main.css">
</head>

<body data-spy="scroll" data-target=".navbar" data-offset="100">
  <div class="container">
    <nav class="navbar navbar-light bg-light sticky-top shadow rounded-bottom">
      <ul class="nav nav-pills">
        <li class="nav-item">
          <a class="nav-link" href="#General">General</a>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link navbar-light dropdown-toggle" href="" data-toggle="dropdown" role="button"
            aria-haspopup="true" aria-expanded="false">Lists</a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#List_of_countries">List of countries</a></li>
            <li><a class="dropdown-item" href="#List_of_countrycodes">List of countrycodes</a></li>
            <li><a class="dropdown-item" href="#List_of_codecs">List of codecs</a></li>
            <li><a class="dropdown-item" href="#List_of_states">List of states</a></li>
            <li><a class="dropdown-item" href="#List_of_languages">List of languages</a></li>
            <li><a class="dropdown-item" href="#List_of_tags">List of tags</a></li>
            <li><a class="dropdown-item" href="#List_of_radio_stations">List of radio stations</a></li>
            <li><a class="dropdown-item" href="#List_of_all_radio_stations">List of all radio stations</a></li>
            <li><a class="dropdown-item" href="#List_of_station_check_results">List of station check results</a></li>
            <li><a class="dropdown-item" href="#List_of_station_clicks">List of station clicks</a></li>
            <li><a class="dropdown-item" href="#List_of_station_check_steps">List of station check steps</a></li>
            <li>
              <div role="separator" class="dropdown-divider"></div>
            </li>
            <li><a class="dropdown-item" href="#Advanced_station_search">Advanced station search</a></li>
            <li><a class="dropdown-item" href="#Search_radio_stations_by_uuid">Search radio stations by UUIDs</a></li>
            <li><a class="dropdown-item" href="#Search_radio_stations_by_url">Search radio stations by URL</a></li>
            <li>
              <div role="separator" class="dropdown-divider"></div>
            </li>
            <li><a class="dropdown-item" href="#Server_stats">Server stats</a></li>
            <li><a class="dropdown-item" href="#Server_mirrors">Server mirrors</a></li>
            <li><a class="dropdown-item" href="#Server_config">Server config</a></li>
            <li><a class="dropdown-item" href="#Server_prometheus">Prometheus monitoring</a></li>
          </ul>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link navbar-light dropdown-toggle" href="#" data-toggle="dropdown" role="button"
            aria-haspopup="true" aria-expanded="true">Stations</a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#Stations_by_clicks">Stations by clicks</a></li>
            <li><a class="dropdown-item" href="#Stations_by_votes">Stations by votes</a></li>
            <li><a class="dropdown-item" href="#Stations_by_recent_click">Stations by recent click</a></li>
            <li><a class="dropdown-item" href="#Stations_by_recently_changed">Stations by recently changed</a></li>
            <li><a class="dropdown-item" href="#Old_versions_of_stations">Old versions of stations</a></li>
            <li><a class="dropdown-item" href="#Broken_stations">Broken stations</a></li>
          </ul>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link navbar-light dropdown-toggle" href="" data-toggle="dropdown" role="button"
            aria-haspopup="true" aria-expanded="true">Modify</a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#Count_station_click">Count station click</a></li>
            <li><a class="dropdown-item" href="#Vote_for_station">Vote for station</a></li>
            <li><a class="dropdown-item" href="#Add_radio_station">Add radio station</a></li>
          </ul>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link navbar-light dropdown-toggle" href="" data-toggle="dropdown" role="button"
            aria-haspopup="true" aria-expanded="true">Structs</a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#Struct_station">Struct station</a></li>
            <li><a class="dropdown-item" href="#Struct_station_check">Struct station check</a></li>
            <li><a class="dropdown-item" href="#Struct_station_check_step">Struct station check step</a></li>
          </ul>
        </li>
      </ul>
      <a class="navbar-brand" href="http://www.radio-browser.info" target="_blank">Homepage</a>
    </nav>
    <div class="card mt-2 shadow p-3 mb-5" id="General">
      <div class="card-body">
        <h1 class="card-title">Community Radio Station Index</h1>
        <h2 class="card-subtitle mb-2 text-muted">General</h2>
        <p>Server version: {{ SERVER_VERSION }}</p>
        <p class="card-text ">This webservice can be used freely but without guarantee to work. I have been keeping it
          online since December, 2015, but downtimes are possible and I am not always home to fix it :) Please do not
          hesitate to send me ideas to improve the service at
          <a href="mailto:segler_alex@web.de">segler_alex AT web DOT de</a>.
          <br />Please send a <span class="text-danger">descriptive User-Agent</span> in your HTTP requests, which makes
          it easier for me to get in touch with developers to help with the usage of the API. Something like <span
            class="text-info">"appname/appversion"</span>,
          for example<span class="text-info"> "Cool Radio App/1.2"</span>. This also helps me to know which apps are
          using this service, so I can keep the list of apps up to date and tell people in which ways they can use this
          service.<br />
          If you know an app that is using this service but not listed on <a class="badge badge-info"
            href="http://www.radio-browser.info">www.radio-browser.info</a>, please drop me a note.<br />Thank you! At
          the moment this service checks radio stations
          by connecting to them at least every day and marks them accordingly. (LastCheckOK=0/1)<br /> If you can't find
          what you are looking for here, please create a feature request on Github or if you are a programmer, fork it
          and make a pull request.
          Thanks for your help! Recent changes can be found in the Changelog.
        </p>
        <hr class="my-4">
        <section class="row">
          <div class="mx-auto">
            <a href="https://github.com/segler-alex/radiobrowser-api-rust" target="_blank"
              class="btn btn-primary mr-3">Fork on Github</a>
            <!--<a href="changelog.html" target="_blank" class="btn btn-info ml-3 mr-3">Changelog</a>-->
          </div>
        </section>
      </div>
    </div>
    <div class="h5"><span class="text-danger">Please note that all the parameters listed below can be added by using an
        HTTP POST request with the encoding "x-www-form-urlencoded" instead of GET request, and they can also be sent
        with encoding "application/json" used by Angular.js, for example.</span></div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Struct_station">
      <div class="container">
        <h1 class="display-4">Struct Station</h1>
        <div class="syntax">
          <div class="h5">Fields:</div>
          <table class="table mt-2 table-striped">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Name</th>
                <th scope="col" width="300">Possible value/Datatype</th>
                <th scope="col">Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>changeuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>A globally unique identifier for the change of the station information</td>
              </tr>
              <tr>
                <td>stationuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>A globally unique identifier for the station</td>
              </tr>
              <tr>
                <td>name</td>
                <td>string</td>
                <td>The name of the station</td>
              </tr>
              <tr>
                <td>url</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>The stream URL provided by the user</td>
              </tr>
              <tr>
                <td>url_resolved</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>
                  An automatically "resolved" stream URL. Things resolved are playlists (M3U/PLS/ASX...), HTTP redirects
                  (Code 301/302).
                  This link is especially usefull if you use this API from a platform that is not able to do a resolve
                  on its own (e.g. JavaScript in browser) or you just don't want to invest the time in decoding
                  playlists yourself.
                </td>
              </tr>
              <tr>
                <td>homepage</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>URL to the homepage of the stream, so you can direct the user to a page with more information about
                  the stream.</td>
              </tr>
              <tr>
                <td>favicon</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>URL to an icon or picture that represents the stream. (PNG, JPG)</td>
              </tr>
              <tr>
                <td>tags</td>
                <td>string, multivalue, split by comma</td>
                <td>Tags of the stream with more information about it</td>
              </tr>
              <tr>
                <td>country</td>
                <td>string</td>
                <td>DEPRECATED: use countrycode instead, full name of the country. Currently it is autogenerated from
                  the countrycode.</td>
              </tr>
              <tr>
                <td>countrycode</td>
                <td>2 letters, uppercase</td>
                <td>Official countrycodes as in <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1
                    alpha-2</a></td>
              </tr>
              <tr>
                <td>state</td>
                <td>string</td>
                <td>Full name of the entity where the station is located inside the country</td>
              </tr>
              <tr>
                <td>language</td>
                <td>string, multivalue, split by comma</td>
                <td>Languages that are spoken in this stream.</td>
              </tr>
              <tr>
                <td>languagecodes</td>
                <td>string, multivalue, split by comma</td>
                <td>Languages that are spoken in this stream by code <a
                    href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-2/B</a></td>
              </tr>
              <tr>
                <td>votes</td>
                <td>number, integer</td>
                <td>Number of votes for this station. This number is by server and only ever increases. It will never be
                  reset to 0.</td>
              </tr>
              <tr>
                <td>lastchangetime</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>Last time when the stream information was changed in the database</td>
              </tr>
              <tr>
                <td>lastchangetime_iso8601</td>
                <td>datetime, <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>
                <td>Last time when the stream information was changed in the database</td>
              </tr>
              <tr>
                <td>codec</td>
                <td>string</td>
                <td>The codec of this stream recorded at the last check.</td>
              </tr>
              <tr>
                <td>bitrate</td>
                <td>number, integer, bps</td>
                <td>The bitrate of this stream recorded at the last check.</td>
              </tr>
              <tr>
                <td>hls</td>
                <td>0 or 1</td>
                <td>Mark if this stream is using HLS distribution or non-HLS.</td>
              </tr>
              <tr>
                <td>lastcheckok</td>
                <td>0 or 1</td>
                <td>The current online/offline state of this stream. This is a value calculated from multiple measure
                  points in the internet. The test servers are located in different countries. It is a majority vote.
                </td>
              </tr>
              <tr>
                <td>lastchecktime</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>The last time when any radio-browser server checked the online state of this stream</td>
              </tr>
              <tr>
                <td>lastchecktime_iso8601</td>
                <td>datetime, <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>
                <td>The last time when any radio-browser server checked the online state of this stream</td>
              </tr>
              <tr>
                <td>lastcheckoktime</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>The last time when the stream was checked for the online status with a positive result</td>
              </tr>
              <tr>
                <td>lastcheckoktime_iso8601</td>
                <td>datetime, <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>
                <td>The last time when the stream was checked for the online status with a positive result</td>
              </tr>
              <tr>
                <td>lastlocalchecktime</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>The last time when this server checked the online state and the metadata of this stream</td>
              </tr>
              <tr>
                <td>lastlocalchecktime_iso8601</td>
                <td>datetime, <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>
                <td>The last time when this server checked the online state and the metadata of this stream</td>
              </tr>
              <tr>
                <td>clicktimestamp</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>The time of the last click recorded for this stream</td>
              </tr>
              <tr>
                <td>clicktimestamp_iso8601</td>
                <td>datetime, <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>
                <td>The time of the last click recorded for this stream</td>
              </tr>
              <tr>
                <td>clickcount</td>
                <td>number, integer</td>
                <td>Clicks within the last 24 hours</td>
              </tr>
              <tr>
                <td>clicktrend</td>
                <td>number, integer</td>
                <td>The difference of the clickcounts within the last 2 days. Posivite values mean an increase, negative
                  a decrease of clicks.</td>
              </tr>
              <tr>
                <td>ssl_error</td>
                <td>number, integer</td>
                <td>0 means no error, 1 means that there was an ssl error while connecting to the stream url.</td>
              </tr>
              <tr>
                <td>geo_lat</td>
                <td>number, double</td>
                <td>Latitude on earth where the stream is located.</td>
              </tr>
              <tr>
                <td>geo_long</td>
                <td>number, double</td>
                <td>Longitude on earth where the stream is located.</td>
              </tr>
              <tr>
                <td>has_extended_info</td>
                <td>bool, optional</td>
                <td>Is true, if the stream owner does provide extended information as HTTP headers which override the information in the database.</td>
              </tr>
            </tbody>
          </table>
          <div class="h5">Example JSON:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  {
    "changeuuid":"01234567-89ab-cdef-0123-456789abcdef",
    "stationuuid":"01234567-89ab-cdef-0123-456789abcdef",
    "name":"Best Radio",
    "url":"http://www.example.com/test.pls",
    "url_resolved":"http://stream.example.com/mp3_128",
    "homepage":"https://www.example.com",
    "favicon":"https://www.example.com/icon.png",
    "tags":"jazz,pop,rock,indie",
    "country":"Switzerland",
    "countrycode":"US",
    "iso_3166_2": "US-NY",
    "state":"",
    "language":"german,english",
    "languagecodes":"ger,eng"
    "votes":0,
    "lastchangetime":"2019-12-12 18:37:02",
    "lastchangetime_iso8601":"2019-12-12T18:37:02Z",
    "codec":"MP3",
    "bitrate":128,
    "hls":0,
    "lastcheckok":1,
    "lastchecktime":"2020-01-09 18:16:35",
    "lastchecktime_iso8601":"2020-01-09T18:16:35Z",
    "lastcheckoktime":"2020-01-09 18:16:35",
    "lastcheckoktime_iso8601":"2020-01-09T18:16:35Z",
    "lastlocalchecktime":"2020-01-08 23:18:38",
    "lastlocalchecktime_iso8601":"2020-01-08T23:18:38Z",
    "clicktimestamp":"",
    "clicktimestamp_iso8601":null,
    "clickcount":0,
    "clicktrend":0,
    "ssl_error": 0,
    "geo_lat": 1.1,
    "geo_long": -2.2,
    "has_extended_info": false
  }
                </pre>
          </div>
          <div class="h5 mt-3">Example XML:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  &lt;station
    changeuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    stationuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    name=&quot;Best radio&quot;
    url=&quot;http://www.example.com/test.pls&quot;
    url_resolved=&quot;http://stream.example.com/mp3_128&quot;
    homepage=&quot;https://www.example.com&quot;
    favicon=&quot;https://www.example.com/icon.png&quot;
    tags=&quot;jazz,pop,rock,indie&quot;
    country=&quot;Switzerland&quot;
    countrycode=&quot;US&quot;
    iso_3166_2=&quot;US-NY&quot;,
    state=&quot;&quot;
    language=&quot;german,english&quot;
    languagecodes=&quot;ger,eng&quot;
    votes=&quot;0&quot;
    lastchangetime=&quot;2019-12-12 18:37:02&quot;
    lastchangetime_iso8601=&quot;2019-12-12T18:37:02Z&quot;
    codec=&quot;MP3&quot;
    bitrate=&quot;128&quot;
    hls=&quot;0&quot;
    lastcheckok=&quot;1&quot;
    lastchecktime=&quot;2020-01-09 18:16:35&quot;
    lastchecktime_iso8601=&quot;2020-01-09T18:16:35Z&quot;
    lastcheckoktime=&quot;2020-01-09 18:16:35&quot;
    lastcheckoktime_iso8601=&quot;2020-01-09T18:16:35Z&quot;
    lastlocalchecktime=&quot;2020-01-08 23:18:38&quot;
    lastlocalchecktime_iso8601=&quot;2020-01-08T23:18:38Z&quot;
    clicktimestamp=&quot;&quot;
    clickcount=&quot;0&quot;
    clicktrend=&quot;0&quot;
    ssl_error=&quot;0&quot;
    geo_lat=&quot;1.1&quot;
    geo_long=&quot;-2.2&quot;
    has_extended_info=&quot;false&quot;/&gt;

            </pre>
          </div>

          <div class="h5 mt-3">Example M3U playlist with extension field:</div>
          The M3U files created by this server are extended with an additional field, that can be used to identify
          entries of the file with this server.
          The field is added as a special comment, so it will not interfere with normal operations of players, that use
          this playlist.
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  #EXTM3U
  #RADIOBROWSERUUID:01234567-89ab-cdef-0123-456789abcdef
  #EXTINF:-1,Best Radio
  http://stream.example.com/mp3_128

  #RADIOBROWSERUUID:11234567-89ab-cdef-0123-456789abcdef
  #EXTINF:-1,Other Radio
  http://stream.example2.com/mp3_256
            </pre>
          </div>

          <div class="h5 mt-3">Example XSPF playlist with extension field:</div>
          The XSPF files created by this server are extended with an additional field, that can be used to identify
          entries of the file with this server.
          We try to be consistent with the specification at <a href="https://xspf.org/orig-xspf-v1.html">https://xspf.org/orig-xspf-v1.html</a>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
  &lt;playlist version=&quot;1&quot; xmlns=&quot;http://xspf.org/ns/0/&quot;&gt;
    &lt;trackList&gt;
      &lt;track&gt;
        &lt;title&gt;Best Radio&lt;/title&gt;
        &lt;location&gt;http://stream.example.com/mp3_128&lt;/location&gt;
        &lt;image&gt;http://example.com/favicon.ico&lt;/image&gt;
        &lt;identifier&gt;radiobrowser:01234567-89ab-cdef-0123-456789abcdef&lt;/identifier&gt;
      &lt;/track&gt;
      &lt;track&gt;
        &lt;title&gt;Other Radio&lt;/title&gt;
        &lt;location&gt;https://stream.example2.com/mp3_256&lt;/location&gt;
        &lt;image&gt;http://example2.com/favicon.ico&lt;/image&gt;
        &lt;identifier&gt;radiobrowser:11234567-89ab-cdef-0123-456789abcdef&lt;/identifier&gt;
      &lt;/track&gt;
    &lt;/trackList&gt;
  &lt;/playlist&gt;
            </pre>
          </div>
        </div>
      </div>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Struct_station_check">
      <div class="container">
        <h1 class="display-4">Struct StationCheck</h1>
        <p>
          This struct is used in a represent an online check of a stream. Most of the information got extracted by
          checking the <a href="https://www.stream-meta.info/">http headers of the stream</a>.
        </p>
        <div class="syntax">
          <div class="h5">Fields:</div>
          <table class="table mt-2 table-striped">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Name</th>
                <th scope="col" width="300">Possible value/Datatype</th>
                <th scope="col">Description</th>
                <th scope="col">Nullable</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>checkuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for this StationCheck</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>stationuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for referencing a Station</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>source</td>
                <td>string</td>
                <td>DNS Name of the server that did the stream check.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>codec</td>
                <td>string</td>
                <td>High level name of the used codec of the stream. May have the format AUDIO or AUDIO/VIDEO.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>bitrate</td>
                <td>number, integer</td>
                <td>Bitrate 1000 bits per second (kBit/s) of the stream. (Audio + Video)</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>hls</td>
                <td>number, integer</td>
                <td>1 means this is an <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming">HLS stream</a>,
                  otherwise 0.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>ok</td>
                <td>number, integer</td>
                <td>1 means this stream is reachable, otherwise 0.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>timestamp_iso8601</td>
                <td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> datetime string</td>
                <td>Date and time of check creation</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>timestamp</td>
                <td>datetime, YYYY-MM-DD HH:mm:ss</td>
                <td>Date and time of check creation</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>urlcache</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>Direct stream url that has been resolved from the main stream url. HTTP redirects and playlists have
                  been decoded. If hls==1 then this is still a HLS-playlist.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>metainfo_overrides_database</td>
                <td>number, integer</td>
                <td>1 means this stream has provided extended information and it should be used to override the local
                  database, otherwise 0.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>public</td>
                <td>number, integer</td>
                <td>1 that this stream appears in the public shoutcast/icecast directory, otherwise 0.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>name</td>
                <td>string</td>
                <td>The name extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>description</td>
                <td>string</td>
                <td>The description extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>tags</td>
                <td>string</td>
                <td>Komma separated list of tags. (genres of this stream)</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>countrycode</td>
                <td>string</td>
                <td>Official countrycodes as in <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1
                    alpha-2</a></td>
                <td>YES</td>
              </tr>
              <tr>
                <td>countrysubdivisioncode</td>
                <td>string</td>
                <td>Official country subdivision codes as in <a href="https://en.wikipedia.org/wiki/ISO_3166-2">ISO
                    3166-2</a></td>
                <td>YES</td>
              </tr>
              <tr>
                <td>homepage</td>
                <td>string</td>
                <td>The homepage extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>favicon</td>
                <td>string</td>
                <td>The favicon extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>loadbalancer</td>
                <td>string</td>
                <td>The loadbalancer extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>server_software</td>
                <td>string</td>
                <td>The name of the server software used.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>sampling</td>
                <td>number, unsigned integer</td>
                <td>Audio sampling frequency in Hz</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>timing_ms</td>
                <td>number, unsigned integer</td>
                <td>Timespan in miliseconds this check needed to be finished.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>languagecodes</td>
                <td>string</td>
                <td>The description extracted from the stream header.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>ssl_error</td>
                <td>number, unsigned integer</td>
                <td>1 means that a ssl error occured while connecting to the stream, 0 otherwise.</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>geo_lat</td>
                <td>number, double</td>
                <td>Latitude on earth where the stream is located.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>geo_long</td>
                <td>number, double</td>
                <td>Longitude on earth where the stream is located.</td>
                <td>YES</td>
              </tr>
            </tbody>
          </table>

          <div class="h5">Example JSON:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  {
    "stationuuid":"960e57c5-0601-11e8-ae97-52543be04c81",
    "checkuuid":"18be4561-309a-11ea-b37a-0242ac120002",
    "source":"fr1.api.radio-browser.info",
    "codec":"MP3",
    "bitrate":128,
    "hls":0,
    "ok":1,
    "timestamp":"2020-01-06 15:34:58",
    "timestamp_iso8601":"2020-01-06T15:34:58Z",
    "urlcache":"http://stream.example.com/mp3_128",
    "metainfo_overrides_database":0,
    "public":null,
    "name":null,
    "description":null,
    "tags":null,
    "countrycode":null,
    "countrysubdivisioncode": null,
    "homepage":null,
    "favicon":null,
    "loadbalancer":null,
    "server_software": "Icecast 2.4.0",
    "sampling": 44100,
    "timing_ms": 495,
    "languagecodes": null,
    "ssl_error": 0,
    "geo_lat": 1.1,
    "geo_long": -2.2
  }
                </pre>
          </div>
          <div class="h5 mt-3">Example XML:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  &lt;check
    stationuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    checkuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    source=&quot;fr1.api.radio-browser.info&quot;
    codec=&quot;MP3&quot;
    bitrate=&quot;128&quot;
    hls=&quot;0&quot;
    ok=&quot;1&quot;
    urlcache=&quot;http://stream.example.com/mp3_128&quot;
    timestamp=&quot;2020-01-06 15:34:58&quot;
    metainfo_overrides_database=&quot;0&quot;
    public=&quot;0&quot;
    name=&quot;&quot;
    description=&quot;&quot;
    tags=&quot;&quot;
    homepage=&quot;&quot;
    loadbalancer=&quot;&quot;
    favicon=&quot;&quot;
    countrycode=&quot;&quot;
    countrysubdivisioncode=&quot;&quot;
    server_software="Icecast 2.4.2"
    sampling=&quot;44100&quot;
    timing_ms=&quot;495&quot;
    languagecodes=&quot;&quot;
    ssl_error=&quot;0&quot;
    geo_lat=&quot;1.1&quot;
    geo_long=&quot;-2.2&quot;/&gt;
            </pre>
          </div>
          <div class="h5 mt-3">Example CSV:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
stationuuid,checkuuid,source,codec,bitrate,hls,ok,timestamp_iso8601,timestamp,urlcache,metainfo_overrides_database,public,name,description,tags,countrycode,homepage,favicon,loadbalancer,do_not_index,countrysubdivisioncode,server_software,sampling,timing_ms,languagecodes,ssl_error,geo_lat,geo_long
01234567-89ab-cdef-0123-456789abcdef,01234567-89ab-cdef-0123-456789abcdef,fr1.api.radio-browser.info,MP3,192,0,1,2021-04-16T08:07:45Z,2021-04-16 08:07:45,http://stream.example.com/mp3_128,0,,,,,,,,,,,Icecast 2.4.2,,495,,0,,
            </pre>
          </div>
        </div>
      </div>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Struct_station_check_step">
      <div class="container">
        <h1 class="display-4">Struct StationCheckStep</h1>
        <p>
          This struct is used in a tree structure to represent all codepaths that were necessary to check an address of
          a single stream. Steps can cause multiple other steps
          for example playlists.
        </p>
        <div class="syntax">
          <div class="h5">Fields:</div>
          <table class="table mt-2 table-striped">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Name</th>
                <th scope="col" width="300">Possible value/Datatype</th>
                <th scope="col">Description</th>
                <th scope="col">Nullable</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>stepuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for this StationCheckStep</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>parent_stepuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for referencing another StationCheckStep. Is set if this step has a parent.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>checkuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for referencing a StationCheck</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>stationuuid</td>
                <td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></td>
                <td>An unique id for referencing a Station</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>url</td>
                <td>string, URL (HTTP/HTTPS)</td>
                <td>The url that this step of the checking process handled</td>
                <td>NO</td>
              </tr>
              <tr>
                <td>urltype</td>
                <td>string</td>
                <td>Does represent which kind of url it is. One of the following: STREAM, REDIRECT, PLAYLIST.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>error</td>
                <td>string</td>
                <td>URL to the homepage of the stream, so you can direct the user to a page with more information about
                  the stream.</td>
                <td>YES</td>
              </tr>
              <tr>
                <td>creation_iso8601</td>
                <td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> datetime string</td>
                <td>Date and time of step creation</td>
                <td>NO</td>
              </tr>
            </tbody>
          </table>
          <div class="h5">Example JSON:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  {
    "stepuuid": "01234567-89ab-cdef-0123-456789abcdef",
    "parent_stepuuid": "01234567-89ab-cdef-0123-456789abcdef",
    "checkuuid": "01234567-89ab-cdef-0123-456789abcdef",
    "stationuuid": "01234567-89ab-cdef-0123-456789abcdef",
    "url": "http://stream.example.com:8000/streamname",
    "urltype": "STREAM",
    "error": "BadError",
    "creation_iso8601": "2021-04-13T20:11:19Z"
  }
                </pre>
          </div>
          <div class="h5 mt-3">Example XML:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
  &lt;checkstep
    stepuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    parent_stepuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    checkuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    stationuuid=&quot;01234567-89ab-cdef-0123-456789abcdef&quot;
    url=&quot;http://stream.example.com:8000/streamname&quot;
    urltype=&quot;STREAM&quot;
    error=&quot;BadError&quot;
    creation_iso8601=&quot;2021-04-13T20:11:19Z&quot;/&gt;
            </pre>
          </div>
          <div class="h5 mt-3">Example CSV:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
stepuuid,parent_stepuuid,checkuuid,stationuuid,url,urltype,error,creation_iso8601
01234567-89ab-cdef-0123-456789abcdef,01234567-89ab-cdef-0123-456789abcdef,01234567-89ab-cdef-0123-456789abcdef,01234567-89ab-cdef-0123-456789abcdef,http://stream.example.com:8000/streamname,STREAM,BadError,2021-04-13T20:11:19Z
            </pre>
          </div>
        </div>
      </div>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_countries">
      <div class="container">
        <h1 class="display-4">List of countries</h1>
        <p class="lead">A JSON-encoded list of all countries in the database. If a filter is given, it will only return
          the ones containing the filter as substring, supported output formats: JSON, XML, CSV</p>
        <hr class="my-4">
        <div class="h5">Syntax:</div>
        <div class="syntax">
          <ul class="list-unstyled ml-4">
            <li class="ml-3">{{ API_SERVER }}/json/countries</li>
            <li class="ml-3">{{ API_SERVER }}/json/countries/&lt;filter&gt;</li>
            <li class="ml-3">{{ API_SERVER }}/xml/countries</li>
            <li class="ml-3">{{ API_SERVER }}/xml/countries/&lt;filter&gt;</li>
          </ul>
          <div class="h5">Parameter:</div>
          <table class="table mt-2 table-striped">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Name</th>
                <th scope="col">Default value</th>
                <th scope="col">Possible value</th>
                <th scope="col">Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>order</td>
                <td>name</td>
                <td>name, stationcount</td>
                <td>name of the attribute the result list will be sorted by</td>
              </tr>
              <tr>
                <td>reverse</td>
                <td>false</td>
                <td>true, false</td>
                <td>reverse the result list if set to true</td>
              </tr>
              <tr>
                <td>hidebroken</td>
                <td>false</td>
                <td>true, false</td>
                <td>do not count broken stations</td>
              </tr>
              <tr>
                <td>offset</td>
                <td>0</td>
                <td>0,1,2,3,4,..</td>
                <td>starting value of the result list from the database. For example, if you want to do paging on the
                  server
                  side.</td>
              </tr>
              <tr>
                <td>limit</td>
                <td>100000</td>
                <td>0,1,2,....</td>
                <td>number of returned datarows (stations) starting with offset</td>
              </tr>
            </tbody>
          </table>
          <div class="h5">Result JSON:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
                [
                {
                  &quot;name&quot;: &quot;Albania&quot;,
                  &quot;stationcount&quot;: &quot;1&quot;
                },
                {
                  &quot;name&quot;: &quot;Argentina&quot;,
                  &quot;stationcount&quot;: &quot;5&quot;
                },
                ..
                ]
                </pre>
          </div>
          <div class="h5 mt-3">Result XML:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
                &lt;result&gt;
                &lt;country name=&quot;Albania&quot; stationcount=&quot;1&quot;/&gt;
                &lt;country name=&quot;Argentina&quot; stationcount=&quot;5&quot;/&gt;
                ..
                &lt;/result&gt;
                </pre>
          </div>
          <div class="h5 mt-3">Example:</div>
          <ul class="list-unstyled ml-4">
            <li><a href="{{ API_SERVER }}/json/countries" target="_blank">{{ API_SERVER }}/json/countries</a></li>
            <li><a href="{{ API_SERVER }}/xml/countries/aus" target="_blank">{{ API_SERVER }}/xml/countries/aus</a></li>
          </ul>
        </div>
      </div>
    </div>
    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_countrycodes">
      <div class="container">
        <h1 class="display-4">List of country codes</h1>
        <p class="lead">A JSON-encoded list of all countries in the database. If a filter is given, it will only return
          the ones containing the filter as substring, supported output formats: JSON, XML, CSV</p>
        <hr class="my-4">
        <div class="h5">Syntax:</div>
        <div class="syntax">
          <ul class="list-unstyled ml-4">
            <li class="ml-3">{{ API_SERVER }}/json/countrycodes</li>
            <li class="ml-3">{{ API_SERVER }}/json/countrycodes/&lt;filter&gt;</li>
            <li class="ml-3">{{ API_SERVER }}/xml/countrycodes</li>
            <li class="ml-3">{{ API_SERVER }}/xml/countrycodes/&lt;filter&gt;</li>
          </ul>
          <div class="h5">Parameter:</div>
          <table class="table mt-2 table-striped">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Name</th>
                <th scope="col">Default value</th>
                <th scope="col">Possible value</th>
                <th scope="col">Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>order</td>
                <td>name</td>
                <td>name, stationcount</td>
                <td>name of the attribute the result list will be sorted by</td>
              </tr>
              <tr>
                <td>reverse</td>
                <td>false</td>
                <td>true, false</td>
                <td>reverse the result list if set to true</td>
              </tr>
              <tr>
                <td>hidebroken</td>
                <td>false</td>
                <td>true, false</td>
                <td>do not count broken stations</td>
              </tr>
              <tr>
                <td>offset</td>
                <td>0</td>
                <td>0,1,2,3,4,..</td>
                <td>starting value of the result list from the database. For example, if you want to do paging on the
                  server
                  side.</td>
              </tr>
              <tr>
                <td>limit</td>
                <td>100000</td>
                <td>0,1,2,....</td>
                <td>number of returned datarows (stations) starting with offset</td>
              </tr>
            </tbody>
          </table>
          <div class="h5">Result JSON:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
                [
                {
                  &quot;name&quot;: &quot;AT&quot;,
                  &quot;stationcount&quot;: &quot;1&quot;
                },
                {
                  &quot;name&quot;: &quot;DE&quot;,
                  &quot;stationcount&quot;: &quot;5&quot;
                },
                ..
                ]
                </pre>
          </div>
          <div class="h5 mt-3">Result XML:</div>
          <div class="well well-sm bg-light border border-secondary rounded">
            <pre class="mt-4">
                &lt;result&gt;
                &lt;country name=&quot;AT&quot; stationcount=&quot;1&quot;/&gt;
                &lt;country name=&quot;DE&quot; stationcount=&quot;5&quot;/&gt;
                ..
                &lt;/result&gt;
                </pre>
          </div>
          <div class="h5 mt-3">Example:</div>
          <ul class="list-unstyled ml-4">
            <li><a href="{{ API_SERVER }}/json/countrycodes" target="_blank">{{ API_SERVER }}/json/countrycodes</a></li>
            <li><a href="{{ API_SERVER }}/xml/countrycodes/at" target="_blank">{{ API_SERVER }}/xml/countrycodes/at</a>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_codecs">
      <div class="container">
        <h1 class="display-4">List of codecs</h1>
        <p class="lead">A JSON-encoded list of all codecs in the database. If a filter is given, it will only return the
          ones containing the filter as substring, supported output formats: JSON, XML, CSV</p>
        <hr class="my-4">
        <div class="h5">Syntax:</div>
        <div class="syntax">
          <ul class="list-unstyled mt-2 ml-4">
            <li>{{ API_SERVER }}/json/codecs</li>
            <li>{{ API_SERVER }}/json/codecs/&lt;filter&gt;</li>
            <li>{{ API_SERVER }}/xml/codecs</li>
            <li>{{ API_SERVER }}/xml/codecs/&lt;filter&gt;</li>
          </ul>
        </div>
        <div class="h5 mt-2">Parameter:</div>
        <table class="table mt-2 table-striped">
          <thead class="thead-dark">
            <tr>
              <th scope="row">Name</th>
              <th scope="row">Default value</th>
              <th scope="row">Possible value</th>
              <th scope="row">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>order</td>
              <td>name</td>
              <td>name, stationcount</td>
              <td>name of the attribute the result list will be sorted by</td>
            </tr>
            <tr>
              <td>reverse</td>
              <td>false</td>
              <td>true, false</td>
              <td>reverse the result list if set to true</td>
            </tr>
            <tr>
              <td>hidebroken</td>
              <td>false</td>
              <td>true, false</td>
              <td>do not count broken stations</td>
            </tr>
            <tr>
              <td>offset</td>
              <td>0</td>
              <td>0,1,2,3,4,..</td>
              <td>starting value of the result list from the database. For example, if you want to do paging on the
                server
                side.</td>
            </tr>
            <tr>
              <td>limit</td>
              <td>100000</td>
              <td>0,1,2,....</td>
              <td>number of returned datarows (stations) starting with offset</td>
            </tr>
          </tbody>
        </table>
        <div class="h5">Result JSON:</div>
        <div class="well well-sm bg-light border border-secondary rounded">
          <pre class="mt-4">
            [
                {
                    &quot;name&quot;: &quot;AAC&quot;,
                    &quot;stationcount&quot;: &quot;34&quot;
                },
                {
                    &quot;name&quot;: &quot;AAC+&quot;,
                    &quot;stationcount&quot;: &quot;367&quot;
                },
                ..
            ]
                </pre>
        </div>
        <div class="h5 mt-2">Result XML:</div>
        <div class="well well-sm bg-light border border-secondary rounded">
          <pre class="mt-4">
                  <code>
                    &lt;result&gt;
                      &lt;codec name=&quot;AAC&quot; stationcount=&quot;34&quot;/&gt;
                      &lt;codec name=&quot;AAC+&quot; stationcount=&quot;367&quot;/&gt;
                      ..
                    &lt;/result&gt;
                  </code>
                </pre>
        </div>
        <div class="h5 mt-2">Example:</div>
        <ul class="list-unstyled ml-4">
          <li><a href="{{ API_SERVER }}/json/codecs" target="_blank">{{ API_SERVER }}/json/codecs</a></li>
          <li><a href="{{ API_SERVER }}/xml/codecs/aac" target="_blank">{{ API_SERVER }}/xml/codecs/aac</a></li>
        </ul>
      </div>
    </div>
    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_states">
      <div class="container">
        <h1 class="display-4">List of states</h1>
        <p class="lead">A JSON-encoded list of all states in the database. Countries are divided into states. If a
          filter is given, it will only return the ones containing the filter as substring. If a country is given, it
          will only display states in
          this country, supported output formats: JSON, XML, CSV</p>
        <hr class="my-4">
        <div class="h5">Syntax:</div>
        <div class="syntax">
          <ul class="list-unstyled ml-4">
            <li>{{ API_SERVER }}/json/states</li>
            <li>{{ API_SERVER }}/json/states/&lt;filter&gt;</li>
            <li>{{ API_SERVER }}/json/states/&lt;country&gt;/&lt;filter&gt;</li>
            <li>{{ API_SERVER }}/xml/states</li>
            <li>{{ API_SERVER }}/xml/states/&lt;filter&gt;</li>
            <li>{{ API_SERVER }}/xml/states/&lt;country&gt;/&lt;filter&gt;</li>
          </ul>
        </div>
        <div class="h5">Parameter:</div>
        <table class="table table-striped mt-2">
          <thead class="thead-dark">
            <tr>
              <th scope="row">Name</th>
              <th scope="row">Default value</th>
              <th scope="row">Possible value</th>
              <th scope="row">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>order</td>
              <td>name</td>
              <td>name, stationcount</td>
              <td>name of the attribute the result list will be sorted by</td>
            </tr>
            <tr>
              <td>reverse</td>
              <td>false</td>
              <td>true, false</td>
              <td>reverse the result list if set to true</td>
            </tr>
            <tr>
              <td>hidebroken</td>
              <td>false</td>
              <td>true, false</td>
              <td>do not count broken stations</td>
            </tr>
            <tr>
              <td>country</td>
              <td></td>
              <td>STRING</td>
              <td>OPTIONAL, filter states by country name</td>
            </tr>
            <tr>
              <td>offset</td>
              <td>0</td>
              <td>0,1,2,3,4,..</td>
              <td>starting value of the result list from the database. For example, if you want to do paging on the
                server
                side.</td>
            </tr>
            <tr>
              <td>limit</td>
              <td>100000</td>
              <td>0,1,2,....</td>
              <td>number of returned datarows (stations) starting with offset</td>
            </tr>
          </tbody>
        </table>
        <div class="h5">Result JSON:</div>
        <div class="well well-sm bg-light border border-secondary rounded">
          <pre class="mt-4">
                [
                    {
                        &quot;name&quot;: &quot;Alabama&quot;,
                        &quot;country&quot;: &quot;United States of America&quot;,
                        &quot;stationcount&quot;: &quot;6&quot;
                    },
                    {
                        &quot;name&quot;: &quot;Alberta&quot;,
                        &quot;country&quot;: &quot;Canada&quot;,
                        &quot;stationcount&quot;: &quot;2&quot;
                    },
                    ..
                ]
                    </pre>
        </div>
        <div class="h5 mt-2">Result XML:</div>
        <div class="well well-sm bg-light border border-secondary rounded">
          <pre class="mt-4">
                &lt;result&gt;
                  &lt;state name=&quot;Alabama&quot; country=&quot;United States of America&quot; stationcount=&quot;6&quot;/&gt;
                  &lt;state name=&quot;Alberta&quot; country=&quot;Canada&quot; stationcount=&quot;2&quot;/&gt;
                  ..
                &lt;/result&gt;
                    </pre>
        </div>

        <div class="h5 mt-2">Example:</div>
        <ul class="list-unstyled ml-4">
          <li><a href="{{ API_SERVER }}/json/states" target="_blank">{{ API_SERVER }}/json/states</a></li>
          <li><a href="{{ API_SERVER }}/xml/states/ber" target="_blank">{{ API_SERVER }}/xml/states/ber</a></li>
          <li><a href="{{ API_SERVER }}/json/states/Germany/ber" target="_blank">{{ API_SERVER
              }}/json/states/Germany/ber</a></li>
        </ul>
      </div>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_languages">
      <h1 class="display-4">List of languages</h1>
      <p class="lead">A JSON-encoded list of all languages in the database. If a filter is given, it will only return
        the ones containing the filter as substring, supported output formats: JSON, XML, CSV</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/json/languages</li>
          <li>{{ API_SERVER }}/json/languages/&lt;filter&gt;</li>
          <li>{{ API_SERVER }}/xml/languages</li>
          <li>{{ API_SERVER }}/xml/languages/&lt;filter&gt;</li>
          <li>{{ API_SERVER }}/csv/languages</li>
          <li>{{ API_SERVER }}/csv/languages/&lt;filter&gt;</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>order</td>
            <td>name</td>
            <td>name, stationcount</td>
            <td>name of the attribute the result list will be sorted by</td>
          </tr>
          <tr>
            <td>reverse</td>
            <td>false</td>
            <td>true, false</td>
            <td>reverse the result list if set to true</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do not count broken stations</td>
          </tr>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          [
              {
                  &quot;name&quot;: &quot;albanian&quot;,
                  &quot;iso_639&quot;: &quot;sq&quot;,
                  &quot;stationcount&quot;: &quot;1&quot;
              },
              {
                  &quot;name&quot;: &quot;american english&quot;,
                  &quot;iso_639&quot;: null,
                  &quot;stationcount&quot;: &quot;8&quot;
              },
              ..
          ]
              </pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          &lt;result&gt;
            &lt;language name=&quot;albanian&quot; iso_639=&quot;sq&quot; stationcount=&quot;1&quot;/&gt;
            &lt;language name=&quot;american english&quot; stationcount=&quot;8&quot;/&gt;
            ..
          &lt;/result&gt;
              </pre>
      </div>
      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/languages" target="_blank">{{ API_SERVER }}/json/languages</a></li>
        <li><a href="{{ API_SERVER }}/xml/languages/ger" target="_blank">{{ API_SERVER }}/xml/languages/ger</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_tags">
      <h1 class="display-4">List of tags</h1>
      <p class="lead">A JSON-encoded list of all tags in the database. If a filter is given, it will only return the
        ones containing the filter as substring, supported output formats: JSON, XML, CSV</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax"> {{ API_SERVER }}/xml/tags
        <br /> {{ API_SERVER }}/xml/tags/&lt;filter&gt;
        <br />{{ API_SERVER }}/json/tags
        <br /> {{ API_SERVER }}/json/tags/&lt;filter&gt;
        <br />
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>order</td>
            <td>name</td>
            <td>name, stationcount</td>
            <td>name of the attribute the result list will be sorted by</td>
          </tr>
          <tr>
            <td>reverse</td>
            <td>false</td>
            <td>true, false</td>
            <td>reverse the result list if set to true</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do not count broken stations</td>
          </tr>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          [
              {
                  &quot;name&quot;: &quot;00s&quot;,
                  &quot;stationcount&quot;: &quot;3&quot;
              },
              {
                  &quot;name&quot;: &quot;10s&quot;,
                  &quot;stationcount&quot;: &quot;1&quot;
              },
              ..
          ]
              </pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          &lt;result&gt;
            &lt;tag name=&quot;00s&quot; stationcount=&quot;3&quot;/&gt;
            &lt;tag name=&quot;10s&quot; stationcount=&quot;1&quot;/&gt;
            ..
          &lt;/result&gt;
              </pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/tags" target="_blank">{{ API_SERVER }}/json/tags</a></li>
        <li><a href="{{ API_SERVER }}/xml/tags/jazz" target="_blank">{{ API_SERVER }}/xml/tags/jazz</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_radio_stations">
      <h1 class="display-4">List of radio stations</h1>
      <p class="lead">A list of radio stations that match the search. The variants with "exact" will only search for
        perfect matches, and others will search for the station whose attribute contains the search term.<br /> Please
        use <a href="#Count_station_click">Count station click</a> API call to let the click be counted, supported
        output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/byuuid/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/byname/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bynameexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bycodec/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bycodecexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bycountry/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bycountryexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bycountrycodeexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bystate/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bystateexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bylanguage/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bylanguageexact/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bytag/<span
              class="searchTerm">{searchterm}</span></li>
          <li>{{ API_SERVER }}/<span class="format">{format}</span>/stations/bytagexact/<span
              class="searchTerm">{searchterm}</span></li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>order</td>
            <td>name</td>
            <td>
              name, url, homepage, favicon, tags, country, state, language, votes, codec, bitrate, lastcheckok,
              lastchecktime, clicktimestamp, clickcount, clicktrend, changetimestamp, random
            </td>
            <td>name of the attribute the result list will be sorted by</td>
          </tr>
          <tr>
            <td>reverse</td>
            <td>false</td>
            <td>true, false</td>
            <td>reverse the result list if set to true</td>
          </tr>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result JSON:</div>
      Details at <a href="#Struct_station">Struct station</a>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4 result"><code>[
  {
    "name": "..",
    ...
  },
  {
    ...
  },
  {
    ...
  },
  ..
]</code></pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      Details at <a href="#Struct_station">Struct station</a>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4 result">
&lt;result&gt;
  &lt;station name=".." ... &gt;
  &lt;station name=".." ... &gt;
  &lt;station name=".." ... &gt;
  ..
&lt;/result&gt;
              </pre>
      </div>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/stations/byname/jazz" target="_blank">{{ API_SERVER
            }}/json/stations/byname/jazz</a></li>
        <li><a href="{{ API_SERVER }}/xml/stations/bycountry/austria" target="_blank">{{ API_SERVER
            }}/xml/stations/bycountry/austria</a></li>
        <li><a href="{{ API_SERVER }}/xml/stations/bycountryexact/austria" target="_blank">{{ API_SERVER
            }}/xml/stations/bycountryexact/austria</a></li>
        <li><a href="{{ API_SERVER }}/xml/stations/bycountrycodeexact/at" target="_blank">{{ API_SERVER
            }}/xml/stations/bycountrycodeexact/at</a></li>
        <li><a href="{{ API_SERVER }}/m3u/stations/bytagexact/320kbps" target="_blank">{{ API_SERVER
            }}/m3u/stations/bytagexact/320kbps</a></li>
        <li><a href="{{ API_SERVER }}/pls/stations/bytagexact/320kbps" target="_blank">{{ API_SERVER
            }}/pls/stations/bytagexact/320kbps</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_all_radio_stations">
      <h1 class="display-4">List of all radio stations</h1>
      <p class="lead">A list of all radio stations. Please use <a href="#Count_station_click">Count station click</a>
        API call to let the click be counted, supported output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations</li>
          <li>{{ API_SERVER }}/json/stations</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>order</td>
            <td>name</td>
            <td>
              name, url, homepage, favicon, tags, country, state, language, votes, codec, bitrate, lastcheckok,
              lastchecktime, clicktimestamp, clickcount, clicktrend, changetimestamp, random
            </td>
            <td>name of the attribute the result list will be sorted by</td>
          </tr>
          <tr>
            <td>reverse</td>
            <td>false</td>
            <td>true, false</td>
            <td>reverse the result list if set to true</td>
          </tr>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations" target="_blank">{{ API_SERVER }}/xml/stations</a></li>
        <li><a href="{{ API_SERVER }}/json/stations" target="_blank">{{ API_SERVER }}/json/stations</a></li>
      </ul>
    </div>


    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_station_check_results">
      <h1 class="display-4">List of station check results</h1>
      <p class="lead">A list of station check results. If a station UUID is provided, the whole history will be
        returned. If a station ID is not provided, a list of all last checks of all stations will be sent (without older
        check results), supported output formats: JSON, XML, CSV</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/checks</li>
          <li>{{ API_SERVER }}/xml/checks/stationuuid</li>
          <li>{{ API_SERVER }}/json/checks</li>
          <li>{{ API_SERVER }}/json/checks/stationuuid</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>stationuuid</td>
            <td></td>
            <td>UUID</td>
            <td>If set, only list check result of the matching station.</td>
          </tr>
          <tr>
            <td>lastcheckuuid</td>
            <td></td>
            <td>UUID</td>
            <td>If set, only list checks after the check with the given check.</td>
          </tr>
          <tr>
            <td>seconds</td>
            <td>0</td>
            <td>positive integer values</td>
            <td>if >0, it will only return history entries from the last 'seconds' seconds.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>999999</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (checks)</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      Details at <a href="#Struct_station_check">Struct station check</a>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/checks" target="_blank">{{ API_SERVER }}/json/checks</a></li>
        <li><a href="{{ API_SERVER }}/xml/checks" target="_blank">{{ API_SERVER }}/xml/checks</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_station_clicks">
      <h1 class="display-4">List of station clicks</h1>
      <p class="lead">A list of station clicks. If a station UUID is provided, only clicks of the station will be
        returned. If a station UUID is not provided, a list of all clicks of all stations will be sent (chunksize
        10000), supported output formats: JSON, XML, CSV</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/clicks</li>
          <li>{{ API_SERVER }}/xml/clicks/stationuuid</li>
          <li>{{ API_SERVER }}/json/clicks</li>
          <li>{{ API_SERVER }}/json/clicks/stationuuid</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>stationuuid</td>
            <td></td>
            <td>UUID</td>
            <td>If set, only list check result of the matching station.</td>
          </tr>
          <tr>
            <td>lastclickuuid</td>
            <td></td>
            <td>UUID</td>
            <td>If set, only list clicks after the click with the given uuid. Use this to continue chunked retrieval to
              get the next 10000 clicks.</td>
          </tr>
          <tr>
            <td>seconds</td>
            <td>0</td>
            <td>positive integer values</td>
            <td>if >0, it will only return history entries from the last 'seconds' seconds.</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          [
          {
            "stationuuid":"963134e8-0601-11e8-ae97-52543be04c81",
            "clickuuid":"ce9ad7bd-34bf-11ea-ac52-52543be04c81",
            "clicktimestamp_iso8601":"2020-01-11T23:14:58Z",
            "clicktimestamp":"2020-01-11 23:14:58"
          },
          {
            "stationuuid":"2a70c205-4850-11e8-b1b0-52543be04c81",
            "clickuuid":"cf49f517-34bf-11ea-ac52-52543be04c81",
            "clicktimestamp_iso8601":"2020-01-11T23:15:00Z"
            "clicktimestamp":"2020-01-11 23:15:00"
          },
          ..
          ]
          </pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          &lt;click
            stationuuid=&quot;961fa288-0601-11e8-ae97-52543be04c81&quot;
            clickuuid=&quot;87a69149-34c1-11ea-ac52-52543be04c81&quot;
            clicktimestamp_iso8601=&quot;2020-01-11T23:27:18Z&quot;
            clicktimestamp=&quot;2020-01-11 23:27:18&quot;
          /&gt;
          &lt;click
            stationuuid=&quot;7a25bf68-1dbe-11ea-a955-52543be04c81&quot;
            clickuuid=&quot;a25e5fb6-34c1-11ea-ac52-52543be04c81&quot;
            clicktimestamp_iso8601=&quot;2020-01-11T23:28:03Z&quot;
            clicktimestamp=&quot;2020-01-11 23:28:03&quot;
          /&gt;
        </pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/clicks" target="_blank">{{ API_SERVER }}/json/clicks</a></li>
        <li><a href="{{ API_SERVER }}/xml/clicks?seconds=3600" target="_blank">{{ API_SERVER
            }}/xml/clicks?seconds=3600</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="List_of_station_check_steps">
      <h1 class="display-4">List of station check steps</h1>
      <p class="lead">
        A list of steps that needed to be done to finish a station check.
      </p>
      <p class="lead">
        Supported output formats: JSON, XML, CSV
      </p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/checksteps</li>
          <li>{{ API_SERVER }}/json/checksteps</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Example</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>uuids</td>
            <td>01234567-89ab-cdef-0123-456789abcdef,01234567-89ab-cdef-0123-456789abcdef</td>
            <td>MANDATORY, comma-separated list of UUIDs of stations, may be array in JSON</td>
          </tr>
        </tbody>
      </table>

      <div class="h5">Result JSON:</div>
      Array of <a href="#Struct_station_check_step">Struct check step</a>

      <div class="h5 mt-2">Result XML:</div>
      Details at <a href="#Struct_station_check_step">Struct check step</a>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4 result">
&lt;result&gt;
  &lt;checkstep stepuuid=".." ... &gt;
  &lt;checkstep stepuuid=".." ... &gt;
  ..
&lt;/result&gt;
              </pre>
      </div>

      <div class="h5 mt-2">Result CSV:</div>
      Details at <a href="#Struct_station_check_step">Struct check step</a>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/checksteps" target="_blank">{{ API_SERVER }}/json/checksteps</a></li>
        <li><a href="{{ API_SERVER }}/xml/checksteps?uuids=01234567-89ab-cdef-0123-456789abcdef" target="_blank">{{
            API_SERVER }}/xml/checksteps?uuids=01234567-89ab-cdef-0123-456789abcdef</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Count_station_click">
      <h1 class="display-4">Station click counter</h1>
      <p class="lead">
        Increase the click count of a station by one. This should be called everytime when a user starts playing a
        stream to mark the stream more popular than others.
        Every call to this endpoint from the same IP address and for the same station only gets counted once per day.
        The call will return detailed information about the stream, supported output formats: JSON, XML ,PLS ,M3U</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/url/stationuuid</li>
          <li>{{ API_SERVER }}/json/url/stationuuid</li>
          <li>{{ API_SERVER }}/pls/url/stationuuid</li>
          <li>{{ API_SERVER }}/m3u/url/stationuuid</li>
        </ul>
      </div>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          {
            "ok": "true",
            "message": "retrieved station url",
            "stationuuid": "9617a958-0601-11e8-ae97-52543be04c81",
            "name": "Station name",
            "url": "http://this.is.an.url"
          }
              </pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
          &lt;result&gt;
            &lt;status ok=&quot;true&quot; message=&quot;retrieved station url&quot; id=&quot;123&quot; name=&quot;Station name&quot; url=&quot;http://this.is.an.url&quot;/&gt;
          &lt;/result&gt;
              </pre>
      </div>
      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/url/123" target="_blank">{{ API_SERVER }}/xml/url/123</a></li>
        <li><a href="{{ API_SERVER }}/json/url/123" target="_blank">{{ API_SERVER }}/json/url/123</a></li>
        <li><a href="{{ API_SERVER }}/pls/url/123" target="_blank">{{ API_SERVER }}/pls/url/123</a></li>
        <li><a href="{{ API_SERVER }}/m3u/url/123" target="_blank">{{ API_SERVER }}/m3u/url/123</a></li>
      </ul>
    </div>


    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Advanced_station_search">
      <h1 class="display-4">Advanced station search</h1>
      <p class="lead">A list of radio stations that match the search. It will search for the station whose attribute
        contains the search term. Please use <a href="#Count_station_click">Count station click</a> API call to let the
        click be counted,
        supported output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/search</li>
          <li>{{ API_SERVER }}/json/stations/search</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>name</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, name of the station</td>
          </tr>
          <tr>
            <td>nameExact</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL. True: only exact matches, otherwise all matches.</td>
          </tr>
          <tr>
            <td>country</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, country of the station</td>
          </tr>
          <tr>
            <td>countryExact</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL. True: only exact matches, otherwise all matches.</td>
          </tr>
          <tr>
            <td>countrycode</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, 2-digit countrycode of the station (see <a
                href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target='_blank'>ISO 3166-1 alpha-2</a>).</td>
          </tr>
          <tr>
            <td>state</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, state of the station</td>
          </tr>
          <tr>
            <td>stateExact</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL. True: only exact matches, otherwise all matches.</td>
          </tr>
          <tr>
            <td>language</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, language of the station</td>
          </tr>
          <tr>
            <td>languageExact</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL. True: only exact matches, otherwise all matches.</td>
          </tr>
          <tr>
            <td>tag</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, a tag of the station</td>
          </tr>
          <tr>
            <td>tagExact</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL. True: only exact matches, otherwise all matches.</td>
          </tr>
          <tr>
            <td>tagList</td>
            <td></td>
            <td>STRING, STRING, ...</td>
            <td>OPTIONAL. , a comma-separated list of tag. It can also be an array of string in JSON HTTP POST
              parameters. All tags in list have to match.</td>
          </tr>
          <tr>
            <td>codec</td>
            <td></td>
            <td>STRING</td>
            <td>OPTIONAL, codec of the station</td>
          </tr>
          <tr>
            <td>bitrateMin</td>
            <td>0</td>
            <td>POSITIVE INTEGER</td>
            <td>OPTIONAL, minimum of kbps for bitrate field of stations in result</td>
          </tr>
          <tr>
            <td>bitrateMax</td>
            <td>1000000</td>
            <td>POSITIVE INTEGER</td>
            <td>OPTIONAL, maximum of kbps for bitrate field of stations in result</td>
          </tr>
          <tr>
            <td>has_geo_info</td>
            <td>both</td>
            <td>not set, true, false</td>
            <td>OPTIONAL, not set=display all, true=show only stations with geo_info, false=show only stations without
              geo_info</td>
          </tr>
          <tr>
            <td>has_extended_info</td>
            <td>both</td>
            <td>not set, true, false</td>
            <td>OPTIONAL, not set=display all, true=show only stations which do provide extended information, false=show only stations without extended information</td>
          </tr>
          <tr>
            <td>is_https</td>
            <td>both</td>
            <td>not set, true, false</td>
            <td>OPTIONAL, not set=display all, true=show only stations which have https url, false=show only stations that do stream unencrypted with http</td>
          </tr>
          <tr>
            <td>order</td>
            <td>name</td>
            <td>
              name, url, homepage, favicon, tags, country, state, language, votes, codec, bitrate, lastcheckok,
              lastchecktime, clicktimestamp, clickcount, clicktrend, changetimestamp, random
            </td>
            <td>OPTIONAL, name of the attribute the result list will be sorted by</td>
          </tr>
          <tr>
            <td>reverse</td>
            <td>false</td>
            <td>true, false</td>
            <td>OPTIONAL, reverse the result list if set to true</td>
          </tr>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>POSITIVE INTEGER</td>
            <td>OPTIONAL, starting value of the result list from the database. For example, if you want to do paging on
              the server side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>OPTIONAL, number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/stations/search" target="_blank">{{ API_SERVER }}/json/stations/search</a>
        </li>
      </ul>
    </div>


    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Search_radio_stations_by_uuid">
      <h1 class="display-4">Search radio stations by UUID</h1>
      <p class="lead">A list of radio stations that have an exact UUID match, supported output formats: JSON, XML, CSV,
        M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">{{ API_SERVER }}/xml/stations/byuuid
        <br /> {{ API_SERVER }}/json/stations/byuuid
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Example value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>uuids</td>
            <td>
              110e57c5-0601-11e8-ae97-52543be04c81,220e57c5-0601-11e8-ae97-52543be04c81,330e57c5-0601-11e8-ae97-52543be04c81
            </td>
            <td>MANDATORY, comma-separated list of UUIDs </td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/stations/byuuid" target="_blank">{{ API_SERVER }}/json/stations/byuuid</a>
        </li>
      </ul>
    </div>


    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Search_radio_stations_by_url">
      <h1 class="display-4">Search radio stations by URL</h1>
      <p class="lead">A list of radio stations that have an exact URL match, supported output formats: JSON, XML, CSV,
        M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">{{ API_SERVER }}/xml/stations/byurl
        <br /> {{ API_SERVER }}/json/stations/byurl
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Example value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>url</td>
            <td>http://this.is.a.link/test.mp3</td>
            <td>MANDATORY, URL of the station</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/stations/byurl" target="_blank">{{ API_SERVER }}/json/stations/byurl</a></li>
      </ul>
    </div>



    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Stations_by_clicks">
      <h1 class="display-4">Stations by clicks</h1>
      <p class="lead">A list of the stations that are clicked the most. You can add a parameter with the number of
        wanted stations, supported output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/topclick</li>
          <li>{{ API_SERVER }}/xml/stations/topclick/rowcount</li>
          <li>{{ API_SERVER }}/json/stations/topclick</li>
          <li>{{ API_SERVER }}/json/stations/topclick/rowcount</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/topclick" target="_blank">{{ API_SERVER }}/xml/stations/topclick</a>
        </li>
        <li><a href="{{ API_SERVER }}/json/stations/topclick/5" target="_blank">{{ API_SERVER
            }}/json/stations/topclick/5</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5">
      <h1 class="display-4" id="Stations_by_votes">Stations by votes</h1>
      <p class="lead">A list of the highest-voted stations. You can add a parameter with the number of wanted stations,
        supported output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/topvote</li>
          <li>{{ API_SERVER }}/xml/stations/topvote/rowcount</li>
          <li>{{ API_SERVER }}/json/stations/topvote</li>
          <li>{{ API_SERVER }}/json/stations/topvote/rowcount</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/topvote" target="_blank">{{ API_SERVER }}/xml/stations/topvote</a>
        </li>
        <li><a href="{{ API_SERVER }}/json/stations/topvote/5" target="_blank">{{ API_SERVER
            }}/json/stations/topvote/5</a></li>
        <li><a href="{{ API_SERVER }}/m3u/stations/topvote/5" target="_blank">{{ API_SERVER
            }}/m3u/stations/topvote/5</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Stations_by_recent_click">
      <h1 class="display-4">Stations by recent click</h1>
      <p class="lead">A list of stations that were clicked recently, supported output formats: JSON, XML, CSV, M3U, PLS,
        XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/lastclick</li>
          <li>{{ API_SERVER }}/xml/stations/lastclick/rowcount</li>
          <li>{{ API_SERVER }}/json/stations/lastclick</li>
          <li>{{ API_SERVER }}/json/stations/lastclick/rowcount</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/lastclick" target="_blank">{{ API_SERVER
            }}/xml/stations/lastclick</a></li>
        <li><a href="{{ API_SERVER }}/json/stations/lastclick/5" target="_blank">{{ API_SERVER
            }}/json/stations/lastclick/5</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Stations_by_recently_changed">
      <h1 class="display-4">Stations by recently changed/added</h1>
      <p class="lead">A list of stations that were added or changed recently, supported output formats: JSON, XML, CSV,
        M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/lastchange</li>
          <li>{{ API_SERVER }}/xml/stations/lastchange/rowcount</li>
          <li>{{ API_SERVER }}/json/stations/lastchange</li>
          <li>{{ API_SERVER }}/json/stations/lastchange/rowcount</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
          <tr>
            <td>hidebroken</td>
            <td>false</td>
            <td>true, false</td>
            <td>do list/not list broken stations</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/lastchange" target="_blank">{{ API_SERVER
            }}/xml/stations/lastchange</a></li>
        <li><a href="{{ API_SERVER }}/json/stations/lastchange/5" target="_blank">{{ API_SERVER
            }}/json/stations/lastchange/5</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Old_versions_of_stations">
      <h1 class="display-4">Old versions of stations</h1>
      <p class="lead">A list of old versions of stations from the last 30 days, and you can also retrieve the history of
        a single station by its ID. They are not visible through any other API calls.
        Station ID can be an ID or a station UUID, supported output formats: JSON, XML, CSV</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/json/stations/changed</li>
          <li>{{ API_SERVER }}/json/stations/changed/stationuuid</li>
          <li>{{ API_SERVER }}/xml/stations/changed</li>
          <li>{{ API_SERVER }}/xml/stations/changed/stationuuid</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>lastchangeuuid</td>
            <td></td>
            <td>valid uuid</td>
            <td>If defined, only show changes that happened after the one with this UUID. Is ignored if uuids is set.
            </td>
          </tr>
          <tr>
            <td>limit</td>
            <td>999999</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (changes)</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/changed?lastchangeuuid=123&limit=10" target="_blank">{{ API_SERVER
            }}/xml/stations/changed?lastchangeuuid=123&limit=10</a></li>
        <li><a href="{{ API_SERVER }}/json/stations/changed/123" target="_blank">{{ API_SERVER
            }}/json/stations/changed/123</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Broken_stations">
      <h1 class="display-4">Broken stations</h1>
      <p class="lead">A list of the stations that did not pass the connection test, supported output formats: JSON, XML,
        CSV, M3U, PLS, XSPF, TTL</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stations/broken</li>
          <li>{{ API_SERVER }}/xml/stations/broken/rowcount</li>
          <li>{{ API_SERVER }}/json/stations/broken</li>
          <li>{{ API_SERVER }}/json/stations/broken/rowcount</li>
        </ul>
      </div>
      <div class="h5 mt-2">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Default value</th>
            <th scope="row">Possible value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>offset</td>
            <td>0</td>
            <td>0,1,2,3,4,..</td>
            <td>starting value of the result list from the database. For example, if you want to do paging on the server
              side.</td>
          </tr>
          <tr>
            <td>limit</td>
            <td>100000</td>
            <td>0,1,2,....</td>
            <td>number of returned datarows (stations) starting with offset</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result:</div>
      <p>
        Array of <a href="#Struct_station">Struct station</a>
      </p>
      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stations/broken?limit=5" target="_blank">{{ API_SERVER
            }}/xml/stations/broken?limit=5</a></li>
        <li><a href="{{ API_SERVER }}/json/stations/broken/5" target="_blank">{{ API_SERVER
            }}/json/stations/broken/5</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Vote_for_station">
      <h1 class="display-4">Vote for station</h1>
      <p class="lead">Increase the vote count for the station by one. Can only be done by the same IP address for one
        station every 10 minutes. If it works, the changed station will be returned as result, supported output formats:
        JSON, XML</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/vote/stationuuid</li>
          <li>{{ API_SERVER }}/json/vote/stationuuid</li>
        </ul>

      </div>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">{
  "ok": true,
  "message": "voted for station successfully"
}</pre>
      </div>
      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">&lt;result&gt;
  &lt;status ok=&quot;true&quot; message=&quot;voted for station successfully&quot;/&gt;
&lt;/result&gt;</pre>
      </div>
      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/vote/123" target="_blank">{{ API_SERVER }}/json/vote/123</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Add_radio_station">
      <h1 class="display-4">Add radio station</h1>
      <p class="lead">Add a radio station to the database, supported output formats: JSON, XML</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/add</li>
          <li>{{ API_SERVER }}/json/add</li>
        </ul>
      </div>
      <div class="h5">Parameter:</div>
      <table class="table mt-2 table-striped">
        <thead class="thead-dark">
          <tr>
            <th scope="row">Name</th>
            <th scope="row">Example value</th>
            <th scope="row">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>name</td>
            <td>Station Name</td>
            <td>MANDATORY, the name of the radio station. Max 400 chars.</td>
          </tr>
          <tr>
            <td>url</td>
            <td>
              <nobr>http://this.is.an.url/stream.mp3</nobr>
            </td>
            <td>MANDATORY, the URL of the station</td>
          </tr>
          <tr>
            <td>homepage</td>
            <td>http://this.is.an.url/</td>
            <td>the homepage URL of the station</td>
          </tr>
          <tr>
            <td>favicon</td>
            <td>
              <nobr>http://this.is.an.url/favicon.ico</nobr>
            </td>
            <td>the URL of an image file (jpg or png)</td>
          </tr>
          <tr>
            <td>countrycode</td>
            <td>AT</td>
            <td>The 2 letter countrycode of the country where the radio station is located</td>
          </tr>
          <tr>
            <td>state</td>
            <td>Vienna</td>
            <td>The name of the part of the country where the station is located</td>
          </tr>
          <tr>
            <td>language</td>
            <td>English</td>
            <td>The main language used in spoken text parts of the radio station</td>
          </tr>
          <tr>
            <td>tags</td>
            <td>pop,rock</td>
            <td>A list of tags separated by commas to describe the station</td>
          </tr>
          <tr>
            <td>geo_lat</td>
            <td>12.3456</td>
            <td>The latitude of the stream location. Nullable.</td>
          </tr>
          <tr>
            <td>geo_long</td>
            <td>-12.3456</td>
            <td>The longitude of the stream location. Nullable.</td>
          </tr>
        </tbody>
      </table>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">{
  "ok": true,
  "message": "station was added",
  "uuid": "550e8400-e29b-11d4-a716-446655440000"
}</pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">&lt;result&gt;
  &lt;status ok=&quot;true&quot;
  message=&quot;station was added&quot;
  uuid=&quot;550e8400-e29b-11d4-a716-446655440000&quot;
&lt;/result&gt;</pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/add" target="_blank">{{ API_SERVER }}/json/add</a></li>
        <li><a href="{{ API_SERVER }}/xml/add" target="_blank">{{ API_SERVER }}/xml/add</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Server_stats">
      <h1 class="display-4">Server stats</h1>
      <p class="lead ">Web service stats, supported output formats: JSON, XML</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/xml/stats</li>
          <li>{{ API_SERVER }}/json/stats</li>
        </ul>
      </div>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">{
  &quot;supported_version&quot;: 1,
  &quot;software_version&quot;: &quot;0.5.0&quot;,
  &quot;status&quot;: &quot;OK&quot;,
  &quot;stations&quot;: 4047,
  &quot;stations_broken&quot;: 45,
  &quot;tags&quot;: 677,
  &quot;clicks_last_hour&quot;: 65,
  &quot;clicks_last_day&quot;: 1822,
  &quot;languages&quot;: 59,
  &quot;countries&quot;: 81
}</pre>
      </div>

      <div class="h5 mt-2">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">&lt;result&gt;
  &lt;stats
    status=&quot;OK&quot;
    supported_version=&quot;1&quot;
    software_version=&quot;0.5.0&quot;
    stations=&quot;4047&quot;
    stations_broken=&quot;45&quot;
    tags=&quot;677&quot;
    clicks_last_hour=&quot;66&quot;
    clicks_last_day=&quot;1824&quot;
    languages=&quot;59&quot;
    countries=&quot;81&quot;/&gt;
&lt;/result&gt;</pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/xml/stats" target="_blank">{{ API_SERVER }}/xml/stats</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Server_mirrors">
      <h1 class="display-4">Server mirrors</h1>
      <p class="lead ">A list of server mirrors. A DNS look-up of all.api.radio-browser.info is performed followed by a
        reverse one for every result getting from the first request. This should be done on the client. ONLY USE THIS if
        your client is not able to do DNS look-ups,
        supported output formats: JSON</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/json/servers</li>
        </ul>
      </div>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">[
    {
        "ip": "95.179.139.106",
        "name": "nl1.api.radio-browser.info"
    },
    {
        "ip": "45.77.62.161",
        "name": "fr1.api.radio-browser.info"
    },
    {
        "ip": "188.68.62.16",
        "name": "de1.api.radio-browser.info"
    },
    {
        "ip": "2a03:4000:6:8077::1",
        "name": "de1.api.radio-browser.info"
    },
    {
        "ip": "2001:19f0:6801:19d7:5400:2ff:fe71:bdb7",
        "name": "fr1.api.radio-browser.info"
    },
    {
        "ip": "2001:19f0:5001:32a4:5400:2ff:fe37:75c2",
        "name": "nl1.api.radio-browser.info"
    }
]</pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/servers" target="_blank">{{ API_SERVER }}/json/servers</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Server_config">
      <h1 class="display-4">Server config</h1>
      <p class="lead ">The current active server config,
        supported output formats: JSON, XML</p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/json/config</li>
          <li>{{ API_SERVER }}/xml/config</li>
        </ul>
      </div>
      <div class="h5">Result JSON:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">{
    "check_enabled": false,
    "prometheus_exporter_enabled": true,
    "pull_servers": [
        "http://www.radio-browser.info/webservice",
        "http://de1.api.radio-browser.info"
    ],
    "tcp_timeout_seconds": 10,
    "broken_stations_never_working_timeout_seconds": 259200,
    "broken_stations_timeout_seconds": 2592000,
    "checks_timeout_seconds": 2592000,
    "click_valid_timeout_seconds": 86400,
    "clicks_timeout_seconds": 2592000,
    "mirror_pull_interval_seconds": 300,
    "update_caches_interval_seconds": 300,
    "server_name": "gaia",
    "server_location": "Datacenter 2 in coolstreet",
    "server_country_code": "DE",
    "check_retries": 5,
    "check_batchsize": 100,
    "check_pause_seconds": 60,
    "api_threads": 5,
    "cache_type": "redis",
    "cache_ttl": 60

}
        </pre>
      </div>

      <div class="h5">Result XML:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
&lt;config&gt;
  &lt;check_enabled&gt;false&lt;/check_enabled&gt;
  &lt;prometheus_exporter_enabled&gt;true&lt;/prometheus_exporter_enabled&gt;
  &lt;pull_servers&gt;
    &lt;url&gt;http://www.radio-browser.info/webservice&lt;/url&gt;
    &lt;url&gt;http://de1.api.radio-browser.info&lt;/url&gt;
  &lt;/pull_servers&gt;
  &lt;tcp_timeout_seconds&gt;10&lt;/tcp_timeout_seconds&gt;
  &lt;broken_stations_never_working_timeout_seconds&gt;259200&lt;/broken_stations_never_working_timeout_seconds&gt;
  &lt;broken_stations_timeout_seconds&gt;2592000&lt;/broken_stations_timeout_seconds&gt;
  &lt;checks_timeout_seconds&gt;2592000&lt;/checks_timeout_seconds&gt;
  &lt;click_valid_timeout_seconds&gt;86400&lt;/click_valid_timeout_seconds&gt;
  &lt;clicks_timeout_seconds&gt;2592000&lt;/clicks_timeout_seconds&gt;
  &lt;mirror_pull_interval_seconds&gt;300&lt;/mirror_pull_interval_seconds&gt;
  &lt;update_caches_interval_seconds&gt;300&lt;/update_caches_interval_seconds&gt;
  &lt;server_name&gt;gaia&lt;/server_name&gt;
  &lt;server_location&gt;Datacenter 2 in coolstreet&lt;/server_location&gt;
  &lt;server_country_code&gt;DE&lt;/server_country_code&gt;
  &lt;check_retries&gt;5&lt;/check_retries&gt;
  &lt;check_batchsize&gt;100&lt;/check_batchsize&gt;
  &lt;check_pause_seconds&gt;60&lt;/check_pause_seconds&gt;
  &lt;api_threads&gt;5&lt;/api_threads&gt;
  &lt;cache_type&gt;redis&lt;/cache_type&gt;
  &lt;cache_ttl&gt;60&lt;/cache_ttl&gt;
&lt;/config&gt;
        </pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/json/config" target="_blank">{{ API_SERVER }}/json/config</a></li>
        <li><a href="{{ API_SERVER }}/xml/config" target="_blank">{{ API_SERVER }}/xml/config</a></li>
      </ul>
    </div>

    <div class="jumbotron mt-2 shadow p-3 mb-5" id="Server_prometheus">
      <h1 class="display-4">Prometheus monitoring</h1>
      <p class="lead ">
        Exporter for <a href="https://prometheus.io/">prometheus</a>. It renders internal data about the server in a
        specific format that is readable by the time series database prometheus.
      </p>
      <hr class="my-4">
      <div class="h5">Syntax:</div>
      <div class="syntax">
        <ul class="list-unstyled ml-4">
          <li>{{ API_SERVER }}/metrics</li>
        </ul>
      </div>
      <div class="h5">Result:</div>
      <div class="well well-sm bg-light border border-secondary rounded">
        <pre class="mt-4">
# HELP radio_browser_clicks_last_hour Clicks in the last hour
# TYPE radio_browser_clicks_last_hour gauge
radio_browser_clicks_last_hour 0

# HELP radio_browser_stations_broken Count of stations that are broken
# TYPE radio_browser_stations_broken gauge
radio_browser_stations_broken 740

# HELP radio_browser_stations_working Count of stations that are working/usable
# TYPE radio_browser_stations_working gauge
radio_browser_stations_working 26514

# HELP radio_browser_stations_todo Count of stations that need are in the queue for checking
# TYPE radio_browser_stations_todo gauge
radio_browser_stations_todo 27254

# HELP radio_browser_stations_deletable_never_worked Count of stations that are in the list for deletion and which never worked
# TYPE radio_browser_stations_deletable_never_worked gauge
radio_browser_stations_deletable_never_worked 0

# HELP radio_browser_stations_deletable_were_working Count of stations that are in the list for deletion and which worked at some point
# TYPE radio_browser_stations_deletable_were_working gauge
radio_browser_stations_deletable_were_working 0
</pre>
      </div>

      <div class="h5 mt-2">Example:</div>
      <ul class="list-unstyled ml-4">
        <li><a href="{{ API_SERVER }}/metrics" target="_blank">{{ API_SERVER }}/metrics</a></li>
      </ul>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"
    integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"
    integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
    crossorigin="anonymous"></script>

</body>

</html>