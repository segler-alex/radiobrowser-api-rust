## Broken stations


```json
<%= config[:api_server] %>/json/stations/broken
<%= config[:api_server] %>/json/stations/broken/rowcount
```

```xml
<%= config[:api_server] %>/xml/stations/broken
<%= config[:api_server] %>/xml/stations/broken/rowcount
```

```shell
<%= config[:api_server] %>/csv/stations/broken
<%= config[:api_server] %>/csv/stations/broken/rowcount
```

```plaintext
<%= config[:api_server] %>/m3u/stations/broken
<%= config[:api_server] %>/m3u/stations/broken/rowcount
```

```ini
<%= config[:api_server] %>/pls/stations/broken
<%= config[:api_server] %>/pls/stations/broken/rowcount
```

> **Results:**

> Array of struct '[station](#station)'

> **Example:**

```json
<%= config[:api_server] %>/json/stations/broken?limit=5
<%= config[:api_server] %>/json/stations/broken/5
```

```xml
<%= config[:api_server] %>/xml/stations/broken?limit=5
<%= config[:api_server] %>/xml/stations/broken/5
```

```shell
<%= config[:api_server] %>/csv/stations/broken?limit=5
<%= config[:api_server] %>/csv/stations/broken/5
```

```plaintext
<%= config[:api_server] %>/m3u/stations/broken?limit=5
<%= config[:api_server] %>/m3u/stations/broken/5
```

```ini
<%= config[:api_server] %>/pls/stations/broken?limit=5
<%= config[:api_server] %>/pls/stations/broken/5
```

A list of the stations that did not pass the connection test, supported output formats: JSON, XML, CSV, M3U, PLS, XSPF, TTL

### Parameters:

| Name | Default value | Possible value | Description |
|------|---------------|----------------|-------------|
| `offset` | `0` | `0`,`1`,`2`,`3`,... | starting value of the result list from the database. For example, if you want to do paging on the server side. |
| `limit` | `100000` | `0`,`1`,`2`,`3`,... | number of returned datarows (stations) starting with offset |
